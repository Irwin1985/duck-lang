// Unit Tests
// This file contains a set of unit tests for the Duck programming language.
// Each test is preceded by the sign @test >test-name< and followed by @output to
// signify the expected output for the test. @end marks the end of program output.
// Any failures will be reported by the test system.

// A simple example test case.
@test simple-test
duck.println(1 + duck.newline + 2 + duck.newline + (1+2))
@output
1
2
3
@end

// Testing an empty program.
@test empty-test
@output
@end

// Testing the println function.
@test print-ln-test
duck.println("Test.")
@output
Test.
@end

// Testing recursive functions.
@test fibonacci-test-1
func fib(n)
  if n > 2 then
    return fib(n-1) + fib(n-2)
  else
    return 1
  endif
end

for i = 1 to 5 do
  duck.println(fib(i))
loop
@output
1
1
2
3
5
@end

// Testing the same function without recursion.
@test fibonacci-test-2
func fib(n)
  a = 1
  b = 0
  while n > 0 do
    c = a
    a = a + b
    b = c
    n = n - 1
  loop
  return b
end

for i = 1 to 7 do
  duck.println(fib(i))
loop
@output
1
1
2
3
5
8
13
@end

// Testing computing factorial numbers.
@test factorial-test
func fact(n)
  if n > 1 then
    return n * fact(n-1)
  endif
  return 1
end
duck.println(fact(4))
@output
24
@end


// Testing dictionaries and arrays.
// This creates a number of extraneous references between dictionaries.
@test dictionary-array
a = [1]

@output
1
2
3
4
@end

// Test basic arithmetic.
@test arithmetic-1
d = duck.println
d(1)
d(1+1)
d(3 - 0)
d(2*2)
d(8-1*3)
d(1*2*3)
d(21/3)
d(22/3+1)
d(5/2*2+1/3+4/1*2-2-1)
d(1+2+3+4)
@output
1
2
3
4
5
6
7
8
9
10
@end

// Test basic arithmetic, again.
@test arithmetic-2
for i = 1 to 10 do
  duck.println(i)
loop
@output
1
2
3
4
5
6
7
8
9
10
@end

// Test floating-point numbers.
//@test float-math-1
//duck.println(1.0 - 1)
//duck.println(1.0/10.0)
//duck.println(0.2*5)
//duck.println(50.0 + 50.0)
//@output
//0
//0.1
//1
//100
//@end

// Test string operations.
@test hello-string
duck.print("Hello,  ")
duck.println('Hello,')
duck.println("World. "+" World.")

if "string" != "s" + "t" + "r" + "i" + "n" + "g" then
  duck.println("failure")
endif
if "abcd" > "defg" then
  duck.println("failure")
endif
if "bbbb" < "aaaa" then
  duck.println("failure")
endif
if "aaa" <= "bbb" then
else
  duck.println("failure")
endif
if "abc" >= "acc" then
  duck.println("failure")
else if "D" == "d" then
  duck.println("failure")
endif

@output
Hello,  Hello,
World.  World.
@end


// Test prime numbers.
@test simple-prime
r = [1, 1, 1, 1, 1, 1]
for i = 2 to 5 do
    if (r[i] > 0) then
      duck.println(i)
      j = i
      while j < 5 do
        r[j] = 0
        j = j + i
      loop
    endif
loop
@output
2
3
5
@end

// Test conditional logic.
@test conditional-logic

func t
  duck.println("true")
end
func f
  duck.println("false")
end

  if true then
    t()
  else
    f()
  endif
  
  if false then
    f()
  else if true then
    t()
  endif
  
  if false then
    f()
  else if false then
    f()
  else
    t()
  endif
  
  if 0 or false or 1 and 1.0 and "yes" then
    t()
  endif
  
  x = []
  if y then
    f()
  endif
  if x then
    t()
  endif
  
  if 0 then
    f()
  else if 0.0 then
    f()
  endif
  
@output
true
true
true
true
true
@end

// Test that loops terminate properly.
@test halting-test
func foo
while true do
return "bar"
loop
end

for i = 1 to 100000 do
loop
duck.println("foo")

duck.println(foo())
@output
foo
bar
@end

// Test for Unicode support for strings and comments.
@test unicode-encoding
// これは Go language  みたいな ハロー・ワールド です。
duck.println("Hello, 世界.")
duck.println("ℵ0 ℵ1") // aleph_0 and aleph_1
duck.println("é")
@output
Hello, 世界.
ℵ0 ℵ1
é
@end

// Test running a program for computing digits of Pi.
@test pi-digits
func calculate_pi(digits)
    array = []
    array_len = 0
    s = ""

    for i = 0 to 10*digits/3 do
        array[i] = 2
    loop

    array_len = 10*digits/3 + 1
    
    predigits = []
    pre_len = 0

    s = s + "3."
    for itr = 0 to digits-1 do
        for i = 0 to array_len-1 do
            array[i] = array[i] * 10
        loop        

        prev = 0
        for i = 1 to array_len - 1 do
            indx = array_len - i
            array[indx] = array[indx] + prev
            divisor = 2 * (indx+1) - 1
            q = array[indx] / divisor
            r = array[indx] - q * divisor
            array[indx] = r
            prev = q * indx
        loop
        
        // reduce left-most
        array[0] = array[0] + prev
        num = array[0] / 10
        r = array[0] - num * 10
        array[0] = r

        if (itr) then
            if num != 9 and num != 10 then
                for i = 0 to pre_len - 1 do
                    s = s + predigits[i]
                loop
                predigits = [num]
                pre_len = 1
            else if num == 9 then
                predigits[pre_len] = num
                pre_len = pre_len + 1
            else if num == 10 then
                for i = 0 to pre_len - 1 do
                    N = predigits[i]
                    N = N + 1
                    if N == 10 then
                        s = s + "0"
                    else
                        s = s + N
                    endif
                loop
                predigits = [0]
                pre_len = 1
            endif
        endif
    loop

    for i = 0 to pre_len - 1 do
        s = s + predigits[i]
    loop

    duck.println(s)
end

calculate_pi(15)

@output
3.14159265358979
@end

// Test the fixed-point function example.
@test y-combinator

func fixed_point(f)
  func curry(g, i)
    func recurse(j)
      return g(g, j)
    end
    return f(recurse, i)
  end

  func apply(k)
    return curry(curry, k)
  end

  return apply
end
func fib_prime(continuation, x)
  if x < 2 then
    return x
  else
    return continuation(x-1) + continuation(x-2)
  endif
end

fibonacci = fixed_point(fib_prime)
for i = 1 to 7 do
  duck.println(fibonacci(i))
loop
@output
1
1
2
3
5
8
13
@end

// Test the stars example from the examples folder.
@test print-stars
for i = 1 to 10 do
    if i/2*2 != i then
        stars = ""
        for j = 1 to i do
            stars = stars + "*"
        loop
        duck.println(stars)
    endif
loop
@output
*
***
*****
*******
*********
@end

// Test lexical scoping.
@test lexical-scope
func inner()
  localx = 1
end

inner()
if localx then
  duck.println("fail")
endif

localx = 0
inner()
if localx then
  duck.println("pass")
endif
@output
pass
@end

// Test scope and closure rules.
@test closure-test
func closure()
  var = 1  
  func get()
    return var
  end
  func set(x)
    var = x
  end
  return [get: get, set: set]
end

obj = closure()
if var then
  duck.println("fail")
endif

obj.set("pass")
duck.println(obj.get())

if var then
  duck.println("fail")
endif
@output
pass
@end

// Test McCarthy 91 function.
//  M(n) = { n - 10, n > 100
//         { M(M(n+11)), n <=  100
@test mccarthy-91
func M(n)
  if n > 100 then
    return n - 10
  else
    return M(M(n+11))
  endif
end

duck.println(M(1))
duck.println(M(21))
duck.println(M(41))
duck.println(M(61))
duck.println(M(81))
duck.println(M(110))
@output
91
91
91
91
91
100
@end

// Test array length function.
@test array-length
array = [1,2,3,4,5,6,7,8,9,10]
array.y = 2
duck.println(len([1,2,3,4,5,6,7,8,9,10]))
duck.println(len(array))
@output
10
11
@end

// Test string length.
@test string-length
x = "Hello, World!"
duck.println(len("abcdefghijklmnopqrstuvwxyz"))
duck.println(len(x))
@output
26
13
@end

// Test string indexing.
@test string-index
string = "ABCD"
duck.println(string[0])
duck.println(string[1])
duck.println(string[2])
duck.println(string[3])
@output
A
B
C
D
@end


@test new-syntax
call\cc testFunction
@output
@end
