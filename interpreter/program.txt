/*
// list some numbers
function fib_prime(continuation, x)
	if x < 2 then
		return x
	else
		return continuation(x-1) + continuation(x-2)
	end
end

// y.combinator
// Y = ?f.(?x.f (x x)) (?x.f (x x))
function fixed_point(f)
    function curry(g, i)
        function recurse(j)
            return g(g, j)
        end
        return f(recurse, i)
    end
    
    function apply(k)
        return curry(curry, k)
    end
        
    return apply
end

fibonacci = fixed_point(fib_prime)

duck.print("Fibonacci numbers:")
for i = 1 to 21 do
    duck.print(i + ". " + fibonacci(i))
loop

function factorial_helper(foo, n)
    if n == 0 then
        return 1
    else
        return n * foo(n - 1)
    end
end

factorial = fixed_point(factorial_helper)

duck.print("Factorial numbers:")
for i = 1 to 11 do
    duck.print(i + ". " + factorial(i))
loop

// call-cc?
*/
/*
function main(number)
	duck.print("Primes less than "+number+":")
	numbers = []
	for i = 2 to number do
		numbers[i] = 1
	loop
	count = 0
	for i = 2 to number do
		if numbers[i] == 1 then
			count = count + 1
			for j = 2 to number/i do
				numbers[i*j] = 0
			loop
			duck.print(count + ". " + i)
		end
	loop
end

main(20000)
*/


function fixed_point(f)
  function curry(g, i)
    function recurse(j)
      return g(g, j)
    end
    return f(recurse, i)
  end

  function apply(k)
    return curry(curry, k)
  end

  return apply
end
function fib_prime(continuation, x)
  if x < 2 then
    return x
  else
    return continuation(x-1) + continuation(x-2)
  end
end

fibonacci = fixed_point(fib_prime)
for i = 1 to 20 do
  duck.print(fibonacci(i))
loop
