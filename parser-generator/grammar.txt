<program> ::= <stmt list>
<stmt list> ::= <stmt> <stmt list>
<stmt list> ::= <epsilon>
<identifier list> ::= <identifier>, <identifier list>
<identifier list> ::= <identifier>
<opt endl> ::= <endl>
<opt endl> ::= <epsilon>
<stmt> ::= import <identifier list> <endl>
<stmt> ::= include <string>
<stmt> ::= <endl>
<stmt> ::= <expr> <endl>
<stmt> ::= <assignment> <endl>
<stmt> ::= <self assignment> <endl>
<stmt> ::= <function def> <endl>
<stmt> ::= <if> <endl>
<stmt> ::= <for loop> <endl>
<stmt> ::= <while loop> <endl>
<stmt> ::= <for each> <endl>
<stmt> ::= <let block> <endl>
<stmt> ::= <try block> <endl>
<stmt> ::= return <expr> <endl>
<stmt> ::= break <endl>
<stmt> ::= continue <endl>
<stmt> ::= throw <expr> <endl>
<stmt> ::= <object def> <endl>
<assignment> ::= <l-value> = <assignment>
<assignment> ::= <l-value> = <condition>
<self assignment> ::= <l-value> += <arithmetic>
<self assignment> ::= <l-value> -= <arithmetic>
<self assignment> ::= <l-value> *= <arithmetic>
<self assignment> ::= <l-value> /= <arithmetic>
<function def> ::= function <identifier> <parameters> <endl> <stmt list> end
<parameters> ::= <epsilon>
<parameters> ::= ( )
<parameters> ::= (<param decl>)
<param decl> ::= <identifier>
<param decl> ::= <param decl>, <identifier>
<if> ::= if <condition> then <endl> <stmt list> <else if>
<else if> ::= else <endl> <stmt list> end
<else if> ::= else <if>
<else if> ::= end
<for loop> ::= for <identifier> = <arithmetic> to <arithmetic> do <endl> <stmt list> loop
<for loop> ::= for <identifier> = <arithmetic> to <arithmetic> step <arithmetic> do <endl> <stmt list> loop
<for each> ::= for <identifier> in <expr> do <endl> <stmt list> loop
<while loop> ::= while <condition> do <endl> <stmt list> loop
<let block> ::= let <bindings> begin <endl> <stmt list> end
<bindings> ::= <identifier> = <expr>, <bindings>
<bindings> ::= <identifier> = <expr>
<try block> ::= try <endl> <stmt list> <catch block> complete
<catch block> ::= catch <identifier> <endl> <stmt list>
<catch block> ::= <epsilon>
<object def> ::= object <identifier> <endl> <object body> end
<object body> ::= static <identifier> <endl> <object body>
<object body> ::= static <identifier> = <expr> <endl> <object body>
<object body> ::= <stmt> <object body>
<object body> ::= operator [ ] (<identifier>) <endl> <stmt list> end <endl> <object body>
<object body> ::= operator + (<identifier>, <identifier>) <endl> <stmt list> end <endl> <object body>
<object body> ::= operator - (<identifier>, <identifier>) <endl> <stmt list> end <endl> <object body>
<object body> ::= operator * (<identifier>, <identifier>) <endl> <stmt list> end <endl> <object body>
<object body> ::= operator / (<identifier>, <identifier>) <endl> <stmt list> end <endl> <object body>
<object body> ::= static <function def> <endl> <object body>
<object body> ::= <epsilon>
<l-value> ::= <identifier>
<l-value> ::= ( <l-value> )
<l-value> ::= <reference> . <identifier>
<l-value> ::= <reference> [ <expr> ]
<l-value> ::= this
<expr> ::= <condition>
<condition> ::= <condition> and <logic>
<condition> ::= <condition> or <logic>
<condition> ::= <logic>
<logic> ::= not <comparison>
<logic> ::= <comparison>
<comparison> ::= <comparison> == <arithmetic>
<comparison> ::= <comparison> != <arithmetic>
<comparison> ::= <comparison> \< <arithmetic>
<comparison> ::= <comparison> > <arithmetic>
<comparison> ::= <comparison> \<= <arithmetic>
<comparison> ::= <comparison> >= <arithmetic>
<comparison> ::= <comparison> is <arithmetic>
<comparison> ::= <arithmetic>
<arithmetic> ::= <arithmetic> + <term>
<arithmetic> ::= <arithmetic> - <term>
<arithmetic> ::= <term>
<term> ::= <term> * <factor>
<term> ::= <term> / <factor>
<term> ::= <term> mod <factor>
<term> ::= <factor>
<factor> ::= -<factor>
<factor> ::= !<factor>
<factor> ::= <final>
<final> ::= ( <expr> )
<final> ::= <boolean>
<final> ::= <integer>
<final> ::= <float>
<final> ::= <string>
<final> ::= <object>
<final> ::= <reference>
<reference> ::= <l-value>
<reference> ::= <reference> ( )
<reference> ::= <reference> ( <arguments> )
<arguments> ::= <arguments>, <expr>
<arguments> ::= <expr>
<object> ::= [ ]
<object> ::= [ <array init> ]
<object> ::= [ <dictionary init> ]
<object> ::= { }
<object> ::= { <dictionary init> }
<object> ::= new <identifier>
<object> ::= new <identifier> ( )
<object> ::= new <identifier> ( <arguments> )
<array init> ::= <array init>, <expr>
<array init> ::= <expr>
<dictionary init> ::= <dictionary init>, <identifier> : <expr>
<dictionary init> ::= <identifier> : <expr>
<boolean> ::= true
<boolean> ::= false
