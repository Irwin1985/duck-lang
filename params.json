{"name":"Duck-lang","tagline":"Duck Programming Language","body":"# Duck Programming Language\r\nA simple scripting language based on the idea of duck-typing (or dynamic typing).\r\n\r\n>&ldquo;When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.&rdquo;\r\n> &mdash; James Whitcomb Riley\r\n\r\n## Language Features\r\n\r\nThe duck programming language supports first-class functions, integer and floating-point arithmetic, string manipulation, dynamically-sized arrays, dictionary types, and basic object oriented programming. The syntax is strongly reminiscent of BASIC, Lua, or Python. While identation is not strictly specified, the language requires specific whitespace in required newlines at the end of certain statements. Duck is currently only implemented in the form of a slow, interpreted frontend, making it useful as a portable scripting language. This frontend has been developed entirely in C.\r\n\r\nThe syntax of loops is somewhat different than other forms of BASIC. For example, a while loop has the following syntax:\r\n```\r\nwhile (condition) do\r\n\t// loop body\r\n\t// ...\r\nloop\r\n```\r\nNotice the use of the syntax \\`do' and \\`loop.' &nbsp;There are a number of example programs in the _examples_ directory of the source repository.\r\n\r\nThe programming language's grammar is represented below in Backas-Naur form. The duck language has its own parser-generator, generating SLR(1) parse tables, so it is relatively easy to change the syntax of the language. Other optional ways to configure the language include disabling case-sensitivity or changing the format of comments, which are currently implemented as `/* C-style block comments */`, `// full line comments`, `; semicolons until end of line`, and `# any macro use`.\r\n\r\nIt is easy to port libraries to Duck. Function hooks are implemented as pointers, of the form `int (function_pointer)(int)` where the argument count is passed as the only parameter. Arguments are bound as string identifiers, and are accessed dynamically in the bound-function's body.\r\n\r\nExample:\r\n```c\r\nvoid BindStandardLibrary()\r\n{\r\n    VALUE duckStdLib = LinkNamespace(\"duck\");\r\n\r\n    VALUE print = CreateFunction(DuckPrint);\r\n    AddParameter(print, \"output\");\r\n    \r\n    LinkFunction(duckStdLib, \"print\", print);\r\n    LinkFunction(duckStdLib, \"println\", print);\r\n\r\n    VALUE prompt = CreateFunction(DuckPrompt);\r\n    LinkFunction(duckStdLib, \"prompt\", prompt);\r\n}\r\n```\r\n\r\n\r\n## Standard Library\r\nDuck has a standard library supporting both command-line input and output. See: stdduck.h.\r\nThere are also SDL and OpenGL bindings to support making a graphical window as well as draw calls.\r\n\r\nHere is a list of those functions:\r\n\r\n#### Library\r\n##### Duck\r\n* duck.print(output)\r\n* duck.println(output)\r\n* duck.prompt()\r\n\r\n##### SDL\r\n* SDL.MakeWindow(width, height, title, fullscreen)\r\n* SDL.flip()\r\n* SDL.event()\r\n* SDL.clearScreen()\r\n* SDL.running()\r\n* SDL.waitkey()\r\n* SDL.quit()\r\n\r\n##### GL\r\n* SDL.glLoadIdentity()\r\n* SDL.glTranslatef(x, y, z)\r\n* SDL.glRotatef(deg, x, y, z)\r\n* SDL.glScalef(x, y, z)\r\n* SDL.glBegin(primitive)\r\n* SDL.glColor3f(r, g, b)\r\n* SDL.glVertex3f(x, y, z)\r\n* SDL.glNormal3f(x, y, z)\r\n* SDL.glEnd()\r\n\r\n## Building\r\nDuck uses CMake 2.8. To build simply run:\r\n```\r\n> cmake .\r\n> make\r\n```\r\n\r\nBuilding gduck with SDL support requires SDL and OpenGL libraries. There are no platform specific libraries.\r\n\r\n## Credits\r\nGreg Tourville - Team Duck (http://team-duck.com)  \r\nHiroyuki Sano  \r\n\r\n\r\n## Future Work\r\n\r\n* Implementing a binary compiler\r\n* Memory management and garbage collection, to prevent crashes due to running out of memory\r\n* Optional, strongly/statically typed form of DUCK\r\n* Multithreaded parallelism &mdash; implicit or explicit through syntax analysis or library functions\r\n* Benchmark and profiling performance intrinsics\r\n* Expanding the standard library\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}